diff --git a/build/chunk-T3DJOLM3.js b/build/chunk-T3DJOLM3.js
index 6d544b12f06cda3e1bcd38c2e0fafca3d2a60dcd..36a24991291d32bab0a6fa9d1d7cdc61a4dc0a9d 100644
--- a/build/chunk-T3DJOLM3.js
+++ b/build/chunk-T3DJOLM3.js
@@ -1,7 +1,3 @@
-import {
-  __export
-} from "./chunk-PZ5AY32C.js";
-
 // src/redis_manager.ts
 import Emittery2 from "emittery";
 import { RuntimeException } from "@poppinss/utils";
@@ -648,26 +644,6 @@ import { Redis } from "ioredis";
 
 // src/connections/abstract_connection.ts
 import Emittery from "emittery";
-
-// src/errors.ts
-var errors_exports = {};
-__export(errors_exports, {
-  E_MULTIPLE_REDIS_PSUBSCRIPTIONS: () => E_MULTIPLE_REDIS_PSUBSCRIPTIONS,
-  E_MULTIPLE_REDIS_SUBSCRIPTIONS: () => E_MULTIPLE_REDIS_SUBSCRIPTIONS
-});
-import { createError } from "@poppinss/utils";
-var E_MULTIPLE_REDIS_SUBSCRIPTIONS = createError(
-  'Cannot subscribe to "%s" channel. Channel already has an active subscription',
-  "E_MULTIPLE_REDIS_SUBSCRIPTIONS",
-  500
-);
-var E_MULTIPLE_REDIS_PSUBSCRIPTIONS = createError(
-  'Cannot subscribe to "%s" pattern. Pattern already has an active subscription',
-  "E_MULTIPLE_REDIS_PSUBSCRIPTIONS",
-  500
-);
-
-// src/connections/abstract_connection.ts
 var AbstractConnection = class extends Emittery {
   constructor(connectionName) {
     super();
@@ -824,15 +800,19 @@ var AbstractConnection = class extends Emittery {
     }
     this.makeSubscriberConnection();
     this.ioSubscriberConnection.on("message", (channel, message) => {
-      const handler = this.subscriptions.get(channel);
-      if (handler) {
-        handler(message);
+      const handlers = this.subscriptions.get(channel);
+      if (handlers) {
+        for (const handler of handlers) {
+          handler(message);
+        }
       }
     });
     this.ioSubscriberConnection.on("pmessage", (pattern, channel, message) => {
-      const handler = this.psubscriptions.get(pattern);
-      if (handler) {
-        handler(channel, message);
+      const handlers = this.psubscriptions.get(pattern);
+      if (handlers) {
+        for (const handler of handlers) {
+          handler(channel, message);
+        }
       }
     });
   }
@@ -860,15 +840,17 @@ var AbstractConnection = class extends Emittery {
    */
   subscribe(channel, handler, options) {
     this.setupSubscriberConnection();
-    if (this.subscriptions.has(channel)) {
-      throw new E_MULTIPLE_REDIS_SUBSCRIPTIONS([channel]);
-    }
     this.ioSubscriberConnection.subscribe(channel).then((count) => {
       if (options?.onSubscription) {
         options?.onSubscription(count);
       }
       this.emit("subscription:ready", { count, connection: this });
-      this.subscriptions.set(channel, handler);
+      const subscriptions = this.subscriptions.get(channel);
+      if (subscriptions) {
+        subscriptions.add(handler);
+      } else {
+        this.subscriptions.set(channel, /* @__PURE__ */ new Set([handler]));
+      }
     }).catch((error) => {
       if (options?.onError) {
         options?.onError(error);
@@ -879,8 +861,18 @@ var AbstractConnection = class extends Emittery {
   /**
    * Unsubscribe from a channel
    */
-  unsubscribe(channel) {
-    this.subscriptions.delete(channel);
+  unsubscribe(channel, handler) {
+    if (handler) {
+      const subscriptions = this.subscriptions.get(channel);
+      if (subscriptions) {
+        subscriptions.delete(handler);
+      }
+      if (subscriptions && subscriptions.size !== 0) {
+        return Promise.resolve();
+      }
+    } else {
+      this.subscriptions.delete(channel);
+    }
     return this.ioSubscriberConnection.unsubscribe(channel);
   }
   /**
@@ -888,15 +880,17 @@ var AbstractConnection = class extends Emittery {
    */
   psubscribe(pattern, handler, options) {
     this.setupSubscriberConnection();
-    if (this.psubscriptions.has(pattern)) {
-      throw new E_MULTIPLE_REDIS_PSUBSCRIPTIONS([pattern]);
-    }
     this.ioSubscriberConnection.psubscribe(pattern).then((count) => {
       if (options?.onSubscription) {
         options?.onSubscription(count);
       }
       this.emit("psubscription:ready", { count, connection: this });
-      this.psubscriptions.set(pattern, handler);
+      const psubscriptions = this.psubscriptions.get(pattern);
+      if (psubscriptions) {
+        psubscriptions.add(handler);
+      } else {
+        this.psubscriptions.set(pattern, /* @__PURE__ */ new Set([handler]));
+      }
     }).catch((error) => {
       if (options?.onError) {
         options?.onError(error);
@@ -907,8 +901,18 @@ var AbstractConnection = class extends Emittery {
   /**
    * Unsubscribe from a given pattern
    */
-  punsubscribe(pattern) {
-    this.psubscriptions.delete(pattern);
+  punsubscribe(pattern, handler) {
+    if (handler) {
+      const psubscriptions = this.psubscriptions.get(pattern);
+      if (psubscriptions) {
+        psubscriptions.delete(handler);
+      }
+      if (psubscriptions && psubscriptions.size !== 0) {
+        return Promise.resolve();
+      }
+    } else {
+      this.psubscriptions.delete(pattern);
+    }
     return this.ioSubscriberConnection.punsubscribe(pattern);
   }
   publish(channel, message, callback) {
@@ -1198,9 +1202,8 @@ baseMethods.forEach((method) => {
 var redis_manager_default = RedisManager;
 
 export {
-  errors_exports,
   RedisConnection,
   RedisClusterConnection,
   redis_manager_default
 };
-//# sourceMappingURL=chunk-T3DJOLM3.js.map
\ No newline at end of file
+//# sourceMappingURL=chunk-HIKRSCG6.js.map
diff --git a/build/index.js b/build/index.js
index 614737ba7fb5fcf6bda27957f82bd8e7f2b93c59..e6afb2a751af222e13658bae2f98699490538fc9 100644
--- a/build/index.js
+++ b/build/index.js
@@ -1,7 +1,6 @@
 import {
   RedisClusterConnection,
   RedisConnection,
-  errors_exports,
   redis_manager_default
 } from "./chunk-T3DJOLM3.js";
 import "./chunk-PZ5AY32C.js";
@@ -291,7 +290,6 @@ export {
   RedisMemoryUsageCheck,
   configure,
   defineConfig,
-  errors_exports as errors,
   stubsRoot
 };
 //# sourceMappingURL=index.js.map
